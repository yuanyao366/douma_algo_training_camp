------ 划分数组 -----
中位数：
将一个集合划分为两个长度相等的子集，其中一个子集中的元素总是大于另一个子集中元素

1,2,3,4,5    --> [1,2,3] 和 [4,5]
1,2,3,4,5,6,7,8     --> [1,2,3,4] 和 [5,6,7,8]

两个升序的数组：
A：[1,2,3,4,5]
B：[1,2,3,4,5,6,7,8]

   left_part | right_part
A：[1,2,3]   | [4,5]
B：[1,2,3,4] | [5,6,7,8]

两个升序的数组：
A：[1,2,3,4,5,6]
B：[1,2,3,4,5,6,7,8]

   left_part|right_part
A：[1,2,3]  |[4,5,6]
B：[1,2,3,4]|[5,6,7,8]

---------------------------------------------
升序数组 A 和 B，长度分别是 m 和 n：
A[0], A[1], ..., A[i-1], A[i], A[i+1], ..., A[m-1]
B[0], B[1], ..., B[j-1], B[j], B[j+1], ..., B[n-1]

对于 A，在索引为 i 的位置切割
对于 B，在索引为 j 的位置切割
         left_part       |       right_part
A[0], A[1], ..., A[i-1], | A[i], A[i+1], ..., A[m-1]
B[0], B[1], ..., B[j-1], | B[j], B[j+1], ..., B[n-1]

如果 A 和 B 的总长度为偶数的话，那么：
1. len(left_part) == len(right_part) ==> i + j = m - i + n -j
2. max(left_part) <= min(right_part)
中位数 = (max(left_part) + min(right_part)) / 2

如果 A 和 B 的总长度为奇数的话，那么：
1. len(left_part) == len(right_part) + 1 ==> i + j = m - i + n -j + 1
2. max(left_part) <= min(right_part)
中位数 = max(left_part)

i + j = m - i + n -j   => i + j = (m + n) / 2
i + j = m - i + n -j + 1  => i + j = (m + n + 1) / 2
当 m + n 为偶数的时候：(m + n) / 2 == (m + n + 1) / 2
所以，我们可以统一为：i + j = (m + n + 1) / 2  ==> j = ((m + n + 1) / 2) - i

max(left_part) <= min(right_part)  ==> B[j - 1] <= A[i] 且 A[i - 1] <= B[j]

问题变为：在有序数组 A 中找到一个 i，使得 B[j - 1] <= A[i] 且 A[i - 1] <= B[j]
二分查找

         left_part       |       right_part
A[0], A[1], ..., A[i-1], | A[i], A[i+1], ..., A[m-1]
B[0], B[1], ..., B[j-1], | B[j], B[j+1], ..., B[n-1]

如果 B[j - 1] > A[i] 说明 A[i] 太小了，i 需要往右走
如果 A[i - 1] > B[j] 说明 A[i - 1] 太大了，i 需要往左走


----------------------
j = ((m + n + 1) / 2) - i
i --> [0,m]
j --> [0,n]
m < n
j = ((m + n + 1) / 2) - m > 0