========================1.python 中的整型
python 中的整型没有范围限制、理论上可以无限大
那么整型对应的二进制位数就不确定了，可能是 16 位、32 位、64 位等

python 处理很大的正整数是非常方便的，但是处理负整数就会有很大的问题

-2 + 3 = 1
 110
+011
=001 + 1000

 11111110
+00000011
=00000001

因为 python 的整型二进制没有规定位数，所以这里会一直加下去
为了防止一直加下去，我们应该固定整数的二进制位

我们想将任何整数的二进制位固定在 4 的话，我们可以这样：n & 0b1111
比如：
 11111110
&00001111
=00001110

对于这道题，我们将整数二进制位固定位 32 位，所以将整数与 32 个 1 取与即可
即：n & 0xFFFFFFFF

在这里，0xFFFFFFFF 可以称为 mask

========================2.正数情况
a=12： 00000000 00000000 00000000 00001100 a=00000000 00000000 00000000 00000100
b=8：  00000000 00000000 00000000 00001000 b=00000000 00000000 00000000 00010000

    00000000 00000000 00000000 00001100
&   00000000 00000000 00000000 00001000
    00000000 00000000 00000000 00001000
<<1 00000000 00000000 00000000 00010000    进位

    00000000 00000000 00000000 00001100
^   00000000 00000000 00000000 00001000
    00000000 00000000 00000000 00000100

    00000000 00000000 00000000 00000100
&   00000000 00000000 00000000 00010000
    00000000 00000000 00000000 00000000
<<1 00000000 00000000 00000000 00000000    进位

    00000000 00000000 00000000 00000100
^   00000000 00000000 00000000 00010000
    00000000 00000000 00000000 00010100   20

========================3.负数情况
-12：11111111 11111111 11111111 11110100   a = 11111111 11111111 11111111 11101100
-8： 11111111 11111111 11111111 11111000   b = 00000000 00000000 00000000 00000000


   11111111 11111111 11111111 11110100
&  11111111 11111111 11111111 11111000
   11111111 11111111 11111111 11110000
<<1 11111111 11111111 11111111 11100000    进位

   11111111 11111111 11111111 11110100
^  11111111 11111111 11111111 11111000
   00000000 00000000 00000000 00001100    和

   00000000 00000000 00000000 00001100
&  11111111 11111111 11111111 11100000
   00000000 00000000 00000000 00000000    进位

   00000000 00000000 00000000 00001100
^  11111111 11111111 11111111 11100000
   11111111 11111111 11111111 11101100    和

// 得到补码

   11111111 11111111 11111111 11101100
^  11111111 11111111 11111111 11111111
   00000000 00000000 00000000 00010011


  ~00000000 00000000 00000000 00010011
   11111111 11111111 11111111 11101000
   11111111 11111111 11111111 11101011
   10000000 00000000 00000000 00010100   -20