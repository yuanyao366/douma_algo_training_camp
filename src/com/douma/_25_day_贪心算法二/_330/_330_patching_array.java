package com.douma._25_day_贪心算法二._330;

/**
 * @官方网站 : https://douma.ke.qq.com
 * @微信公众号 : 抖码课堂
 * @官方微信号 : bigdatatang01
 * 抖码算法，让算法学习变的简单有趣
 * @作者 : 老汤
 */
public class _330_patching_array {
    /* 330. 按要求补齐数组
        给定一个已排序的正整数数组 nums，和一个正整数 n 。
        从 [1, n] 区间内选取任意个数字补充到 nums 中，
        使得 [1, n] 区间内的任何数字都可以用 nums 中某几个数字的和来表示。
        请输出满足上述要求的最少需要补充的数字个数。

    示例 1:
    输入: nums = [1, 2, 3], n = 6
    输出: 1
    解释:
    根据 nums 里现有的组合 [1], [3], [1,3]，可以得出 1, 3, 4。
    现在如果我们将 2 添加到 nums 中， 组合变为: [1], [2], [3], [1,3], [2,3], [1,2,3]。
    其和可以表示数字 1, 2, 3, 4, 5, 6，能够覆盖 [1, 6] 区间里所有的数。
    所以我们最少需要添加一个数字。

    示例 2:
    输入: nums = [1,2,4,5,10], n = 20
    输出: 2
    解释: 我们需要添加 [2, 4]。

    示例 3:
    输入: nums = [1,2,2], n = 5
    输出: 0
     */

    public int minPatches(int[] nums, int n) {
        int res = 0;
        // 贪心的保证 [1, x - 1] 这个区间中所有数字会被覆盖
        // bug 修复：在下面 x 需要累加和乘以 2 ，所以有可能会溢出
        long x = 1;
        int index = 0;
        while (x <= n) {
            if (index < nums.length && nums[index] <= x) {
                // 因为根据贪心思想，我们总保证区间小于x的所有值会被覆盖掉
                // [1, x + x - 1]  [1, x + nums[index] - 1]
                // 因此 x + 1，x + 2，... x + nums[index] - 1 都会被覆盖到，更新x += nums[index]
                x += nums[index];
                index++;
            } else {
                res++; // 把 x 放入数组中
                // 对于正整数 x，如果区间 [1,x-1] 内的所有数字都已经被覆盖，
                // 且 x 在数组中，则区间 [1,2x-1] 内的所有数字也都被覆盖
                x *= 2;
            }
        }

        return res;
    }
}
