package main

import (
    "fmt"
    "math"
    "strconv"
)

/* 力扣 98. 验证二叉搜索树
给定一个二叉树，判断其是否是一个有效的二叉搜索树。
假设一个二叉搜索树具有如下特征：
    1.节点的左子树只包含小于当前节点的数。
    2.节点的右子树只包含大于当前节点的数。
    3. 所有左子树和右子树自身必须也是二叉搜索树。

     输入:
        2
       / \
      1   3
    输出: true

    输入:
        5
       / \
      1   4
         / \
        3   6
    输出: false
 */

/*
ACM 模式输入描述:
第一行两个数 n, root，分别表示二叉树有 n 个节点，第 root 个节点时二叉树的根
接下来共 n 行，第 i 行三个数 val_i, left_i, right_i，分别表示第 i 个节点的值 val，左儿子，右儿子
值为 null 则表示空节点。

输入:
    5 1
    5 2 3
    1 null null
    3 4 5
    4 null null
    6 null null
 */

type TreeNode struct {
    Val int
    Left *TreeNode
    Right *TreeNode
 }

// 3. 后序遍历
func isValidBST(root *TreeNode) bool {

    var dfs func(*TreeNode, int64, int64) bool
    dfs = func(node *TreeNode, lower int64, upper int64) bool {
        if node == nil {
            return true
        }
        if int64(node.Val) <= lower || int64(node.Val) >= upper {
            return false
        }

        var isLeftBST = dfs(node.Left, lower, int64(node.Val))
        var isRightBST = dfs(node.Right, int64(node.Val), upper)

        return isLeftBST && isRightBST
    }

    return dfs(root, math.MinInt64, math.MaxInt64)
}

func main() {
    var n int
    fmt.Scanf("%d", &n)
    var rootIndex int
    fmt.Scanf("%d", &rootIndex)

    // 1. 构造一棵树
    // 记录每个节点
    tree := make([]TreeNode, n)
    // 记录每个节点的左右子节点的值
    leaf := make([][]string, n)
    for i := range leaf {
        leaf[i] = make([]string, 2)
    }
    for i := 0; i < n; i++ {
        var root int
        fmt.Scanf("%d", &root)
        node := TreeNode{root, nil, nil}
        tree[i] = node

        var left string
        fmt.Scanf("%s", &left)
        leaf[i][0] = left
        var right string
        fmt.Scanf("%s", &right)
        leaf[i][1] = right
    }

    for i := 0; i < n; i++ {
        // 左子节点
        left := leaf[i][0]
        if "null" != left {
            // 这里减 1 是因为：节点值从 1 开始，而索引从 0 开始
            val, _ := strconv.Atoi(left)
            tree[i].Left = &tree[val - 1];
        }
        // 右子节点
        right := leaf[i][1]
        if "null" != right {
            // 这里减 1 是因为：节点值从 1 开始，而索引从 0 开始
            val, _ := strconv.Atoi(right)
            tree[i].Right = &tree[val - 1];
        }
    }

    // 2. 拿到树的根节点
    root := tree[rootIndex]

    // 3. 判断这棵树是否是二叉查找树
    res := isValidBST(&root)

    // 4. 打印结果
    fmt.Println(res)
}