package main

import (
    "fmt"
    "math"
    "strings"
    "strconv"
)

/* 力扣 98. 验证二叉搜索树
给定一个二叉树，判断其是否是一个有效的二叉搜索树。
假设一个二叉搜索树具有如下特征：
    1.节点的左子树只包含小于当前节点的数。
    2.节点的右子树只包含大于当前节点的数。
    3. 所有左子树和右子树自身必须也是二叉搜索树。

     输入:
        2
       / \
      1   3
    输出: true

    输入:
        5
       / \
      1   4
         / \
        3   6
    输出: false
 */

/*
ACM 模式输入描述:
        第一行表示所有的节点

    输入:
        5,1,4,null,null,3,6

    说明：
        (1) 索引为 0 的节点 5 是根节点
        (2) 索引为 0 的节点的左节点是：2 * 0 + 1 = 1，也就是索引为 1 的节点
        (3) 索引为 0 的节点的右节点是：2 * 0 + 2 = 2，也就是索引为 2 的节点
        (2) 索引为 1 的节点的左节点是：2 * 1 + 1 = 3，也就是索引为 3 的节点
        (3) 索引为 1 的节点的右节点是：2 * 1 + 2 = 4，也就是索引为 4 的节点
 */

type TreeNode struct {
    Val int
    Left *TreeNode
    Right *TreeNode
 }

// 3. 后序遍历
func isValidBST(root *TreeNode) bool {

    var dfs func(*TreeNode, int64, int64) bool
    dfs = func(node *TreeNode, lower int64, upper int64) bool {
        if node == nil {
            return true
        }
        if int64(node.Val) <= lower || int64(node.Val) >= upper {
            return false
        }

        var isLeftBST = dfs(node.Left, lower, int64(node.Val))
        var isRightBST = dfs(node.Right, int64(node.Val), upper)

        return isLeftBST && isRightBST
    }

    return dfs(root, math.MinInt64, math.MaxInt64)
}

func main() {
    var line string
    fmt.Scanf("%s", &line)

    data := strings.Split(line, ",")
    n := len(data)
    // 1. 构造一棵树
    nodes := make([]TreeNode, n)

    for i := 0; i < n; i++ {
        if "null" != data[i] {
            v, _ := strconv.Atoi(data[i])
            node := TreeNode{v, nil, nil}
            nodes[i] = node
        }
    }

    for i := 0; i * 2 + 2 < n; i++ {
        nodes[i].Left = &nodes[2 * i + 1];
        nodes[i].Right = &nodes[2 * i + 2];
    }

    // 2. 拿到树的根节点
    root := nodes[0]

    // 3. 判断这棵树是否是二叉查找树
    res := isValidBST(&root)

    // 4. 打印结果
    fmt.Println(res)
}